<?php

/**
 * @file
 * Functions to support theming in the AM base theme.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\Html;
use Drupal\Core\Menu\MenuTreeParameters;

/**
 * Implements hook_theme().
 */
function am_base_theme_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'am_base_theme_examples' => [
      'render element' => '',
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function am_base_theme_preprocess_page(array &$variables): void {
  // Add id of current language to language block in top header.
  $variables['current_language'] = strtoupper(Drupal::languageManager()->getCurrentLanguage()->getId());
  $lang_count = count(\Drupal::languageManager()->getLanguages());
  // Count active languages.
  $parameters = new MenuTreeParameters();
  // Get array of enabled links in menu.
  $top_header_menu_enabled_links = Drupal::menuTree()->load('top-header-menu', $parameters->onlyEnabledLinks());
  if (empty($top_header_menu_enabled_links) && $lang_count == 1) {
    // Hide top_header.
    unset($variables['page']['top_header']);
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function am_base_theme_preprocess_block__am_base_theme_menu_main(array &$variables): void {
  // Add id of current language to language block in top header.
  $variables['current_language'] = strtoupper(Drupal::languageManager()->getCurrentLanguage()->getId());
  $plugin_block = \Drupal::service('plugin.manager.block')->createInstance('language_block:language_interface');
  if ($plugin_block != NULL && is_object($plugin_block) && method_exists($plugin_block, 'build')) {
    $variables['language_switcher'] = $plugin_block->build();
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'webform'.
 */
function am_base_theme_preprocess_webform(array &$variables): void {
  $variables['attributes']['class'][] = 'custom-form';
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function am_base_theme_preprocess_breadcrumb(array &$variables): void {
  if (!empty($variables['breadcrumb'])) {
    // Add node title in the end of breadcrumb.
    $route_match = \Drupal::routeMatch();
    $route = $route_match->getRouteObject();

    if ($route != NULL) {
      $request = \Drupal::request();
      $page_title = \Drupal::service('title_resolver')->getTitle($request, $route);
      if (!empty($page_title)) {
        $variables['breadcrumb'][] = [
          'text' => $page_title,
        ];
      }
    }

    // Add cache context based on url.
    $variables['#cache']['contexts'][] = 'url';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function am_base_theme_page_attachments_alter(array &$attachments): array {
  // Add styling for layout builder modal to authenticated users.
  if (\Drupal::currentUser()->isAuthenticated()) {
    $config = \Drupal::config('layout_builder_modal.settings');
    if ($config->get('theme_display') == 'seven') {
      $attachments['#attached']['library'][] = 'layout_builder_modal/seven';
    }
    if ($config->get('theme_display') == 'claro') {
      $attachments['#attached']['library'][] = 'layout_builder_modal/claro';
    }
  }

  return $attachments;
}

/**
 * Implements hook_preprocess_pattern_media_360().
 */
function am_base_theme_preprocess_pattern_media_360(array &$variables): void {
  // Get the media_id field value.
  $variables['media_id'] = pathinfo($variables['media_id'])['filename'];
  // Use it to generate a unique container_id.
  $variables['container_id'] = Html::getUniqueId($variables['media_id']);
}

/**
 * Implements hook_preprocess_block__am_base_theme_menu_top_header().
 */
function am_base_theme_preprocess_block__am_base_theme_menu_top_header(array &$variables): void {
  // Add FontAwesome Icon to url.
  set_font_awesome_icons($variables);
}

/**
 * Implements hook_preprocess_block__am_base_theme_menu_sitemap().
 */
function am_base_theme_preprocess_block__am_base_theme_menu_sitemap(array &$variables): void {
  // Add FontAwesome Icon to url.
  set_font_awesome_icons($variables);
}

/**
 * Add FontAwesome Icon to url items.
 */
function set_font_awesome_icons(array &$variables): void {
  $items = $variables['elements']['content']['#items'];
  foreach ($items as $item) {
    $url = $item['url'];
    if ($url->isExternal()) {
      // FontAwesome Icon.
      $url->setOption('fa_icon', 'fa-external-link-alt');
      $url->setOption('fa_icon_tag', 'i');
      $url->setOption('fa_icon_appearance', 'after');
    }
  }
}
